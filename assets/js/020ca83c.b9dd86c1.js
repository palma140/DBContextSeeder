"use strict";(self.webpackChunkdbcontextseeder_docs=self.webpackChunkdbcontextseeder_docs||[]).push([[979],{529:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"basics/seeders/basic-usage","title":"\ud83d\udce6 Basic Usage","description":"The DbContextSeeder is simple and intuitive to use. To get started, initialize a TableSeeder by providing the target table name and desired locale:","source":"@site/docs/basics/seeders/basic-usage.md","sourceDirName":"basics/seeders","slug":"/basics/seeders/basic-usage","permalink":"/DBContextSeeder/docs/basics/seeders/basic-usage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Available Types of Data Generation","permalink":"/DBContextSeeder/docs/basics/seeders/"},"next":{"title":"Seeders Reference","permalink":"/DBContextSeeder/docs/basics/seeders/seeder-reference"}}');var i=a(4848),t=a(8453);const r={sidebar_position:1},d="\ud83d\udce6 Basic Usage",c={},l=[{value:"\ud83d\udce7 Example: Email Field with Custom Logic",id:"-example-email-field-with-custom-logic",level:3},{value:"\ud83d\udd10 Example: Hashed Password",id:"-example-hashed-password",level:3}];function o(e){const s={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"-basic-usage",children:"\ud83d\udce6 Basic Usage"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"DbContextSeeder"})," is simple and intuitive to use. To get started, initialize a ",(0,i.jsx)(s.code,{children:"TableSeeder"})," by providing the target table name and desired locale:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$tableSeeder = new TableSeeder('table', 'pt_PT');\n"})}),"\n",(0,i.jsx)(s.p,{children:"You can then use the available fluent methods to define your data seeding logic:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$tableSeeder->name('name')->unique();\n"})}),"\n",(0,i.jsx)(s.h3,{id:"-example-email-field-with-custom-logic",children:"\ud83d\udce7 Example: Email Field with Custom Logic"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$tableSeeder->email('email')\r\n    ->unique()\r\n    ->callback(function ($value, $row) {\r\n        $strings = explode(' ', $row['name']);\r\n        return $strings[0] . '.' . ($strings[1] ?? '') . '.' . ($strings[2] ?? '') .\r\n               rand(1950, 2020) . '@' . (rand(0, 1) === 0 ? 'gmail.com' : 'email.com');\r\n    })\r\n    ->lowercase()\r\n    ->removeAccents();\n"})}),"\n",(0,i.jsx)(s.h3,{id:"-example-hashed-password",children:"\ud83d\udd10 Example: Hashed Password"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$tableSeeder->value('password', '123')->hash();\n"})}),"\n",(0,i.jsx)(s.p,{children:"This approach ensures that each field can be customized easily with chaining methods, making your seeders both readable and flexible. \ud83d\udca1"})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>d});var n=a(6540);const i={},t=n.createContext(i);function r(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);