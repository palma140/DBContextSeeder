"use strict";(self.webpackChunkdbcontextseeder_docs=self.webpackChunkdbcontextseeder_docs||[]).push([[8365],{1499:(e,r,n)=>{n.d(r,{A:()=>a});const a=n.p+"assets/images/1-8f552f967144a0972b9661a7438bbae1.png"},6058:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"advanced-examples/index","title":"Code explained","description":"Sample Image","source":"@site/docs/advanced-examples/index.md","sourceDirName":"advanced-examples","slug":"/advanced-examples/","permalink":"/DBContextSeeder/docs/advanced-examples/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udfaf Advanced Examples","permalink":"/DBContextSeeder/docs/category/-advanced-examples"},"next":{"title":"Full Demo","permalink":"/DBContextSeeder/docs/advanced-examples/demo"}}');var t=n(4848),o=n(8453);const i={sidebar_position:5},s="Code explained",d={},l=[{value:"1. Users Seeder",id:"1-users-seeder",level:2},{value:"2. Products Seeder",id:"2-products-seeder",level:2},{value:"3. Categories Seeder",id:"3-categories-seeder",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"code-explained",children:"Code explained"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"Sample Image",src:n(1499).A+"",width:"1672",height:"1706"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"1-users-seeder",children:"1. Users Seeder"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"<?php\r\n\r\nnamespace Database\\Seeders;\r\n\r\nuse Carbon\\Carbon;\r\nuse Illuminate\\Database\\Seeder;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\Enums\\HashAlgorithm;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TablePopulate;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TableSeeder;\r\nuse Faker\\Factory as Faker;\r\nuse Illuminate\\Support\\Str;\r\n\r\nclass DatabaseSeederGrocery extends Seeder\r\n{\r\n    public function run(): void\r\n    {\r\n        $users = new TableSeeder('users', 'en_US');\r\n\r\n        // Basic settings and CSV for IDs\r\n        $users->bothify('field', __DIR__ . 'data.csv', 'id');\r\n        $users->sequential('id', 1);\r\n\r\n        // Password and token\r\n        $users->value('password', '123')->hash(HashAlgorithm::SHA256);\r\n        $users->randomString('remember_token', 10);\r\n\r\n        // Created and updated dates\r\n        $users->date('created_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-07-05 10:17:38');\r\n        $users->value('updated_at', null)\r\n            ->generateFromField('created_at', function ($created_at) {\r\n                return Carbon::parse($created_at)->addMinutes(rand(10, 120))->format('Y-m-d H:i:s');\r\n            });\r\n        $users->value('email_verified_at', null)\r\n            ->generateFromField('updated_at', function ($updated_at) {\r\n                return Carbon::parse($updated_at)->addMinutes(rand(10, 12000))->format('Y-m-d H:i:s');\r\n            });\r\n\r\n        // User types with conditional callback\r\n        $users->value('type', 'member')->callback(function ($type, $row) {\r\n            if ($row['id'] <= 4) return 'board';\r\n            if ($row['id'] <= 8) return 'member';\r\n            if ($row['id'] <= 12) return 'employee';\r\n            return $type;\r\n        });\r\n\r\n        // Custom names for first IDs\r\n        $users->name('name')->callback(function ($name, $row) {\r\n            return match ($row['id']) {\r\n                1 => \"Board Member\",\r\n                2 => \"Second Board Member or Administrator\",\r\n                3 => \"Third Board Member\",\r\n                4 => \"Fourth Board Member\",\r\n                5 => \"Regular Member\",\r\n                6 => \"Second Regular Member\",\r\n                7 => \"Third Regular Member\",\r\n                8 => \"Fourth Regular Member\",\r\n                9 => \"First Employee\",\r\n                10 => \"Second Employee\",\r\n                11 => \"Third Employee\",\r\n                12 => \"Fourth Employee\",\r\n                default => $name,\r\n            };\r\n        });\r\n\r\n        // **Emails generated based on first and last name**\r\n        $users->email('email')->callback(function ($email, $row) {\r\n            if ($row['id'] <= 4) {\r\n                return \"b\" . $row['id'] . \"@mail.com\";\r\n            }\r\n\r\n            $email = match ($row['id']) {\r\n                5 => \"m1@mail.com\",\r\n                6 => \"m2@mail.com\",\r\n                7 => \"m3@mail.com\",\r\n                8 => \"m4@mail.com\",\r\n                9 => \"e1@mail.com\",\r\n                10 => \"e2@mail.com\",\r\n                11 => \"e3@mail.com\",\r\n                12 => \"e4@mail.com\",\r\n                default => \"default@mail.com\",\r\n            };\r\n\r\n            // Generate email as first.last@domain\r\n            $names = explode(' ', $row['name']);\r\n            return $names[0] . '.' . end($names) . '@' . Faker::create()->freeEmailDomain();\r\n        })->removeAccents('@.')->lowercase();\r\n\r\n        // Blocked flag with condition\r\n        $users->boolean('blocked', 15)->callback(function ($blocked, $row) {\r\n            if ($row['id'] <= 12) return 0;\r\n            return $blocked ? '1' : '0';\r\n        });\r\n\r\n        // NIF with control digit calculation\r\n        $users->value('nif', function () {\r\n            $nif = '';\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $nif .= rand(0, 9);\r\n            }\r\n            $weights = [9, 8, 7, 6, 5, 4, 3, 2];\r\n            $sum = 0;\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $sum += $nif[$i] * $weights[$i];\r\n            }\r\n            $remainder = $sum % 11;\r\n            $controlDigit = (11 - $remainder) % 10;\r\n            $nif .= $controlDigit;\r\n            return $nif;\r\n        })->nullable(20);\r\n\r\n        // Address, payments etc.\r\n        $users->streetAddress('default_delivery_address')->unique()->nullable(30);\r\n        $users->array('default_payment_type', ['Visa', 'MB WAY', 'PayPal'])->nullable(20);\r\n\r\n        $users->value('default_payment_reference', null)->callback(function ($reference, $row) {\r\n            if ($row['default_payment_type'] == 'Visa') return Faker::create()->creditCardNumber('Visa');\r\n            if ($row['default_payment_type'] == 'PayPal') return $row['email'];\r\n            if ($row['default_payment_type'] == 'MB WAY') {\r\n                $prefixes = ['91', '92', '93', '96', '97', '98'];\r\n                $prefix = $prefixes[array_rand($prefixes)];\r\n                $phoneNumber = $prefix;\r\n                for ($i = 0; $i < 7; $i++) {\r\n                    $phoneNumber .= rand(0, 9);\r\n                }\r\n                return $phoneNumber;\r\n            }\r\n            return null;\r\n        });\r\n\r\n        // Gender for photo filtering\r\n        $users->array('gender', ['M', 'F']);\r\n\r\n        // **Photo files based on gender and initial letter of file**\r\n        $users->file('photo', __DIR__ . DIRECTORY_SEPARATOR . 'photos', storage_path('app/public/photos'), function ($file, $originalName, $row) {\r\n            if ($row['gender'] == 'M' && (Str::charAt($originalName, 0) == 'M' || Str::charAt($originalName, 0) == 'm')) {\r\n                return true;\r\n            }\r\n            if ($row['gender'] == 'F' && (Str::charAt($originalName, 0) == 'F' || Str::charAt($originalName, 0) == 'f')) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        $users->populate();\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"2-products-seeder",children:"2. Products Seeder"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"<?php\r\n\r\nnamespace Database\\Seeders;\r\n\r\nuse Carbon\\Carbon;\r\nuse Illuminate\\Database\\Seeder;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TablePopulate;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TableSeeder;\r\n\r\nclass ProductsSeeder extends Seeder\r\n{\r\n    public function run(): void\r\n    {\r\n        $productsSeeder = new TableSeeder('products', 'en_US');\r\n\r\n        $productsSeeder->sequential('id', 1);\r\n        $productsSeeder->text('name', 50);\r\n        $productsSeeder->text('description', 150);\r\n        $productsSeeder->float('price', 1, 2, 100);  // Price from 1 to 100\r\n        $productsSeeder->numberBetween('stock_lower_limit', 5, 10);\r\n        $productsSeeder->numberBetween('stock_upper_limit', 20, 50);\r\n        $productsSeeder->value('stock', null)->callback(function ($stock, $row) {\r\n            return max($row['stock_lower_limit'], $row['stock_upper_limit'] + mt_rand(-5, 10));\r\n        });\r\n        $productsSeeder->date('created_at', 'Y-m-d H:i:s', '2023-01-01 00:00:00', '2023-06-01 00:00:00');\r\n        $productsSeeder->date('updated_at', 'Y-m-d H:i:s', '2023-06-02 00:00:00', '2023-07-01 00:00:00');\r\n\r\n        // Example callback to make some products have a deleted_at date\r\n        $productsSeeder->value('deleted_at', null)->generateFromField('updated_at', function ($updated_at) {\r\n            return Carbon::parse($updated_at)->addDays(rand(10, 60))->format('Y-m-d H:i:s');\r\n        })->nullable(20)->callback(function ($value, $row) {\r\n            // 20% chance product is deleted\r\n            return (rand(1, 100) <= 20) ? $value : null;\r\n        });\r\n\r\n        $productsPopulate = new TablePopulate($productsSeeder);\r\n\r\n        // Example fixed products to populate from array, you can customize this\r\n        $productsArray = [\r\n            ['name' => 'apple', 'description' => 'Fresh red apple', 'price' => 1.50, 'stock_lower_limit' => 5, 'stock_upper_limit' => 20],\r\n            ['name' => 'banana', 'description' => 'Yellow ripe bananas', 'price' => 1.20, 'stock_lower_limit' => 5, 'stock_upper_limit' => 25],\r\n            ['name' => 'milk', 'description' => 'Dairy milk 1L', 'price' => 0.99, 'stock_lower_limit' => 10, 'stock_upper_limit' => 30],\r\n            ['name' => 'bread', 'description' => 'Whole grain bread', 'price' => 2.50, 'stock_lower_limit' => 5, 'stock_upper_limit' => 15],\r\n        ];\r\n\r\n        $productsPopulate->populateFromArray($productsArray);\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"3-categories-seeder",children:"3. Categories Seeder"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"<?php\r\n\r\nnamespace Database\\Seeders;\r\n\r\nuse Illuminate\\Database\\Seeder;\r\nuse Illuminate\\Support\\Facades\\DB;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TableSeeder;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TablePopulate;\r\nuse Carbon\\Carbon;\r\nuse Illuminate\\Support\\Str;\r\n\r\nclass CategoriesSeeder extends Seeder\r\n{\r\n    use SeederUtils;\r\n\r\n    // Static list of categories to seed, where each entry has an ID and a name\r\n    public static $categories = [\r\n        1 => 'Fruits',\r\n        2 => 'Vegetables',\r\n        3 => 'Dairy',\r\n        4 => 'Meat',\r\n        5 => 'Seafood',\r\n        6 => 'Bakery',\r\n        7 => 'Baby food',\r\n        8 => 'Frozen foods',\r\n        9 => 'Snacks',\r\n        10 => 'Miscellaneous',\r\n        11 => 'Grains',\r\n    ];\r\n\r\n    /**\r\n     * Main method executed when running this seeder with `php artisan db:seed`\r\n     */\r\n    public function run(): void\r\n    {\r\n        $this->command->info(\"-----------------------------------------------------------------\");\r\n        $this->command->info(\"START of categories seeder\");\r\n        $this->command->info(\"-----------------------------------------------------------------\");\r\n\r\n        $this->command->info(\"\\n-----------------------------------------------\");\r\n        $this->command->info(\"START of categories table seeder\");\r\n\r\n        // Convert the static categories list into an array of associative arrays\r\n        $categoriesArray = [];\r\n        foreach (self::$categories as $categoryId => $categoryName) {\r\n            $categoriesArray[] = [\r\n                'id' => $categoryId,\r\n                'name' => $categoryName,\r\n            ];\r\n        }\r\n\r\n        // Create the seeder for the 'categories' table with Portuguese locale\r\n        $categoriesSeeder = new TableSeeder('categories', 'pt_PT');\r\n\r\n        // Add file attachment to the 'image' column, copying from source to destination if it matches the category name\r\n        $categoriesSeeder->file(\r\n            'image',\r\n            __DIR__ . DIRECTORY_SEPARATOR . 'categories_images',                      // Source directory (inside seeder folder)\r\n            storage_path('app/public/categories_images'),        // Destination directory in Laravel storage\r\n            function ($file, $originalName, $row) {\r\n                // Match image filename (without extension) with category name\r\n                return str_replace(' ', '_', strtolower($this->stripAccents($row['name']))) === strtolower(explode('.', $originalName)[0]);\r\n            },\r\n            function () {\r\n                // Generate a random 32-character string for filename\r\n                return Str::random(32) . \".png\";\r\n            },\r\n            '128M' // Max memory for loading images\r\n        );\r\n\r\n        // Add 'created_at' with a random date between the given range\r\n        $categoriesSeeder->date(\r\n            'created_at',\r\n            'Y-m-d H:i:s',\r\n            DatabaseSeeder::$prepareStartDate,\r\n            DatabaseSeeder::$prepareEndDate->subHours(2)\r\n        );\r\n\r\n        // Generate 'updated_at' based on 'created_at' plus 10\u201330 minutes\r\n        $categoriesSeeder->value('updated_at', null)->generateFromField('created_at', function ($created_at) {\r\n            return Carbon::parse($created_at)->addSeconds(rand(600, 1800))->format('Y-m-d H:i:s');\r\n        });\r\n\r\n        // Generate 'deleted_at' based on 'updated_at' plus 10\u201330 minutes, but only for the 'Grains' category\r\n        $categoriesSeeder->value('deleted_at', null)->generateFromField('updated_at', function ($updated_at) {\r\n            return Carbon::parse($updated_at)->addSeconds(rand(600, 1800))->format('Y-m-d H:i:s');\r\n        })->callback(function ($value, $row) {\r\n            // Only apply deletion timestamp to the \"Grains\" category\r\n            return $row['name'] === 'Grains' ? $value : null;\r\n        });\r\n\r\n        // Initialize the populate process with the array of categories\r\n        $categoriesPopulate = new TablePopulate($categoriesSeeder);\r\n        $categoriesPopulate->populateFromArray($categoriesArray);\r\n\r\n        $this->command->info(\"END of categories table seeder\");\r\n        $this->command->info(\"-----------------------------------------------\");\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>s});var a=n(6540);const t={},o=a.createContext(t);function i(e){const r=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);