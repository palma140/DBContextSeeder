"use strict";(self.webpackChunkdbcontextseeder_docs=self.webpackChunkdbcontextseeder_docs||[]).push([[393],{1499:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/1-8f552f967144a0972b9661a7438bbae1.png"},6566:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>$,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"advanced-examples","title":"Advanced Examples","description":"Texto alternativo","source":"@site/docs/advanced-examples.md","sourceDirName":".","slug":"/advanced-examples","permalink":"/DBContextSeeder/docs/advanced-examples","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcc4 populateFromJson()","permalink":"/DBContextSeeder/docs/populator/table-populate/populate-json"}}');var a=n(4848),o=n(8453);const i={sidebar_position:5},s="Advanced Examples",d={},u=[];function l(e){const r={code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"advanced-examples",children:"Advanced Examples"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.img,{alt:"Texto alternativo",src:n(1499).A+"",width:"1672",height:"1706"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-php",children:"<?php\r\n\r\nnamespace Database\\Seeders;\r\n\r\nuse Carbon\\Carbon;\r\nuse DateTime;\r\nuse Illuminate\\Database\\Seeder;\r\nuse Illuminate\\Support\\Facades\\DB;\r\nuse Illuminate\\Support\\Str;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\Enums\\HashAlgorithm;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TablePopulate;\r\nuse IPLeiria\\ESTG\\EI\\DBContextSeeder\\TableSeeder;\r\nuse Faker\\Factory as Faker;\r\n\r\nclass DatabaseSeederGrocery extends Seeder\r\n{\r\n    /**\r\n     * Seed the application's database.\r\n     */\r\n    public function run(): void\r\n    {\r\n        $users = new TableSeeder('users', 'pt_PT');\r\n\r\n        $users->bothify('field', __DIR__ . 'data.csv', 'id');\r\n\r\n        $users->sequential('id', 1);\r\n        $users->value('password', '123')->hash(HashAlgorithm::SHA256);\r\n        $users->randomString('remember_token', 10);\r\n        $users->date('created_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-07-05 10:17:38');\r\n        $users->value('updated_at', null)\r\n            ->generateFromField('created_at', function ($created_at) {\r\n                return Carbon::parse($created_at)->addMinutes(rand(10, 120))->format('Y-m-d H:i:s');\r\n            });\r\n        $users->value('email_verified_at', null)\r\n            ->generateFromField('updated_at', function ($updated_at) {\r\n                return Carbon::parse($updated_at)->addMinutes(rand(10, 12000))->format('Y-m-d H:i:s');\r\n            });\r\n        $users->value('type', 'member')->callback(function ($type, $row) {\r\n            if($row['id'] <= 4) return 'board';\r\n            if($row['id'] <= 8) return 'member';\r\n            if($row['id'] <= 12) return 'employee';\r\n            return $type;\r\n        });\r\n        $users->name('name')->callback(function ($name, $row) {\r\n            return match ($row['id']) {\r\n                1 => \"Board Member\",\r\n                2 => \"Second Board Member or Admininstrator\",\r\n                3 => \"Third Board Member\",\r\n                4 => \"Fourth Board Member\",\r\n                5 => \"Regular Member\",\r\n                6 => \"Second Regular Member\",\r\n                7 => \"Third Regular Member\",\r\n                8 => \"Fourth Regular Member\",\r\n                9 => \"First Employee\",\r\n                10 => \"Second Employee\",\r\n                11 => \"Third Employee\",\r\n                12 => \"Fourth Employee\",\r\n                default => $name,\r\n            };\r\n        });\r\n        $users->email('email')->callback(function ($email, $row) {\r\n            if ($row['id'] <= 4) {\r\n                return \"b\" . $row['id'] . \"@mail.pt\";\r\n            }\r\n\r\n            $email = match ($row['id']) {\r\n                5 => \"m1@mail.pt\",\r\n                6 => \"m2@mail.pt\",\r\n                7 => \"m3@mail.pt\",\r\n                8 => \"m4@mail.pt\",\r\n                9 => \"e1@mail.pt\",\r\n                10 => \"e2@mail.pt\",\r\n                11 => \"e3@mail.pt\",\r\n                12 => \"e4@mail.pt\",\r\n                default => \"default@mail.pt\",\r\n            };\r\n                $names = explode(' ', $row['name']);\r\n                return $names[0] . '.' . end($names) . '@' . Faker::create()->freeEmailDomain();\r\n        })->removeAccents('@.')->lowercase();\r\n        $users->boolean('blocked', 15)->callback(function ($blocked, $row) {\r\n            if($row['id'] <= 12) return 0;\r\n            return $blocked ? '1' : '0';\r\n        });\r\n        $users->value('nif', function () {\r\n            $nif = '';\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $nif .= rand(0, 9);\r\n            }\r\n            $weights = [9, 8, 7, 6, 5, 4, 3, 2];\r\n            $sum = 0;\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $sum += $nif[$i] * $weights[$i];\r\n            }\r\n            $remainder = $sum % 11;\r\n            $controlDigit = (11 - $remainder) % 10;\r\n            $nif .= $controlDigit;\r\n            return $nif;\r\n        })->nullable(20);\r\n        $users->streetAddress('default_delivery_address')->unique()->nullable(30);\r\n        $users->array('default_payment_type', ['Visa', 'MB WAY', 'PayPal'])->nullable(20);\r\n        $users->value('default_payment_reference', null)->callback(function ($reference, $row) {\r\n           if($row['default_payment_type'] == 'Visa') return Faker::create()->creditCardNumber('Visa');\r\n           if($row['default_payment_type'] == 'PayPal') return $row['email'];\r\n           if($row['default_payment_type'] == 'MB WAY') {\r\n               $prefixes = ['91', '92', '93', '96', '97', '98'];\r\n               $prefix = $prefixes[array_rand($prefixes)];\r\n               $phoneNumber = $prefix;\r\n               for ($i = 0; $i < 7; $i++) {\r\n                   $phoneNumber .= rand(0, 9);\r\n               }\r\n               return $phoneNumber;\r\n           }\r\n           return null;\r\n        });\r\n\r\n        $users->array('gender', ['M', 'F']);\r\n\r\n        $users->file('photo', __DIR__ . '\\photos', storage_path('app/public/photos'), function ($file, $originalName, $row) {\r\n            if($row['gender'] == 'M' && (Str::charAt($originalName, 0) == 'M' || Str::charAt($originalName, 0) == 'm')) return true;\r\n            if($row['gender'] == 'F' && (Str::charAt($originalName, 0) == 'W' || Str::charAt($originalName, 0) == 'w')) return true;\r\n\r\n            return false;\r\n        }, fn($row) => null, '128M')->unique()->callback(function ($value, $row) {\r\n            return $value;\r\n        });\r\n\r\n        $users->value('deleted_at', null)->generateFromField('updated_at', function ($deleted_at) {\r\n            return Carbon::parse($deleted_at)->addMinutes(rand(900, 12000))->format('Y-m-d H:i:s');\r\n        })->nullable(90)->callback(function ($value, $row) {\r\n            if($row['id'] <= 12) return null;\r\n            return $value;\r\n        });\r\n\r\n        $usersPopulate = new TablePopulate($users);\r\n        $usersPopulate->populate(516, 1, 30);\r\n\r\n        #settings_shipment_costs\r\n        $settingsShippingSeeder = new TableSeeder('settings_shipping_costs', 'pt_PT');\r\n\r\n        $settingsShippingSeeder->date('created_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n        $settingsShippingSeeder->date('updated_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n\r\n        $settingsShipping = [\r\n            [\r\n                'min_value_threshold' => 0,\r\n                'max_value_threshold' => 50,\r\n                'shipping_cost' => 10,\r\n            ],\r\n            [\r\n                'min_value_threshold' => 50,\r\n                'max_value_threshold' => 100,\r\n                'shipping_cost' => 5,\r\n            ],\r\n            [\r\n                'min_value_threshold' => 100,\r\n                'max_value_threshold' => 9999999.99,\r\n                'shipping_cost' => 0,\r\n            ]\r\n        ];\r\n\r\n        $settingsShippingPopulate = new TablePopulate($settingsShippingSeeder);\r\n        $settingsShippingPopulate->populateFromArray($settingsShipping);\r\n\r\n        #settings\r\n        $membership_fee = 100;\r\n\r\n        $settingsSeeder = new TableSeeder('settings', 'pt_PT');\r\n        $settingsSeeder->value('membership_fee', $membership_fee);\r\n        $settingsSeeder->date('created_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n        $settingsSeeder->date('updated_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n\r\n        $settingsPopulate = new TablePopulate($settingsSeeder);\r\n        $settingsPopulate->populate(1);\r\n\r\n        #categories\r\n        $categoriesSeeder = new TableSeeder('categories', 'pt_PT');\r\n        $categoriesSeeder->array('name', [\r\n            'Fruits',\r\n            'Vegetables',\r\n            'Dairy',\r\n            'Meat',\r\n            'Seafood',\r\n            'Bakery',\r\n            'Baby food',\r\n            'Frozen foods',\r\n            'Snacks',\r\n            'Miscellaneous',\r\n            'Grains',\r\n        ], true);\r\n\r\n        $categoriesSeeder->file('image', __DIR__ . '\\categories_images', storage_path('app\\public\\categories_images'), function ($file, $originalName, $row) {\r\n            if($row['name'] == 'Fruits' && explode('.', $originalName)[0] == 'fruits') return true;\r\n            if($row['name'] == 'Vegetables' && explode('.', $originalName)[0] == 'vegetables') return true;\r\n            if($row['name'] == 'Dairy' && explode('.', $originalName)[0] == 'dairy') return true;\r\n            if($row['name'] == 'Grains' && explode('.', $originalName)[0] == 'grains') return true;\r\n            if($row['name'] == 'Meat' && explode('.', $originalName)[0] == 'meat') return true;\r\n            if($row['name'] == 'Seafood' && explode('.', $originalName)[0] == 'seafood') return true;\r\n            if($row['name'] == 'Bakery' && explode('.', $originalName)[0] == 'bakery') return true;\r\n            if($row['name'] == 'Baby food' && explode('.', $originalName)[0] == 'baby_food') return true;\r\n            if($row['name'] == 'Frozen foods' && explode('.', $originalName)[0] == 'frozen_foods') return true;\r\n            if($row['name'] == 'Snacks' && explode('.', $originalName)[0] == 'snacks') return true;\r\n            return false;\r\n        }, function () {}, '128M');\r\n\r\n        $categoriesSeeder->date('created_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n        $categoriesSeeder->date('updated_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n\r\n        $categoriesSeeder->value('deleted_at', null)->generateFromField('updated_at', function ($deleted_at) {\r\n            return Carbon::parse($deleted_at)->addMinutes(rand(10, 30))->format('Y-m-d H:i:s');\r\n        })->callback(function ($value, $row) {\r\n            if($row['name'] == 'Grains') return $value;\r\n            return null;\r\n        });\r\n\r\n        $categoriesPopulate = new TablePopulate($categoriesSeeder);\r\n        $categoriesPopulate->populate(11);\r\n\r\n        #products\r\n        $names = require 'Products.php';\r\n\r\n        $transformed = [];\r\n\r\n        foreach ($names as $categoryId => $items) {\r\n            foreach ($items as $item) {\r\n                $transformed[] = [\r\n                    'name' => strtolower($item),\r\n                    'category_id' => $categoryId\r\n                ];\r\n            }\r\n        }\r\n\r\n        $productsSeeder = new TableSeeder('products', 'pt_PT');\r\n        $productsSeeder->text('description', 30);\r\n        $productsSeeder->file('photo', __DIR__ . '\\products_photos', storage_path('app\\public\\products_photos'), function ($file, $originalName, $row) {\r\n            $normalized = strtolower(str_replace(' ', '_', $row['name']));\r\n            if($normalized == explode('.', $originalName)[0]) return true;\r\n            return null;\r\n        }, function () {}, '128M');\r\n\r\n        $productsSeeder->float('price', 1, 2, 5);\r\n        $productsSeeder->numberBetween('stock_lower_limit', 2, 5);\r\n        $productsSeeder->numberBetween('stock_upper_limit', 20, 50);\r\n        $productsSeeder->value('stock', null)->callback(function ($stock, $row) {\r\n            return max($row['stock_lower_limit'], $row['stock_upper_limit'] + mt_rand(-5, 10));\r\n        });\r\n\r\n        $productsSeeder->date('created_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n        $productsSeeder->date('updated_at', 'Y-m-d H:i:s', '2023-06-22 23:05:38', '2023-06-22 23:05:38');\r\n\r\n        $productsPopulate = new TablePopulate($productsSeeder);\r\n        $productsPopulate->populateFromArray($transformed);\r\n\r\n        #cards\r\n        $cardsSeeder = new TableSeeder('cards', 'pt_PT');\r\n        $cardsSeeder->sql('id', 'SELECT id FROM users WHERE type != ?', ['Employee'])->unique();\r\n        $cardsSeeder->sequential('card_number', 100000)->callback(function ($cardNumber, $row) {\r\n            dump($cardNumber);\r\n            return $cardNumber;\r\n        });\r\n        $cardsSeeder->value('card_number', null)->generateFromField('id', function ($id) {\r\n            return $id + 99999;\r\n        });\r\n        $cardsSeeder->value('balance', $membership_fee)->callback(function ($balance, $row) use ($membership_fee) {\r\n            $valueCredited = $membership_fee + (mt_rand(0, 3) == 1 ? mt_rand(0, 100) * 5 : 0);\r\n            return round($valueCredited - $membership_fee, 2);\r\n        });\r\n\r\n        $cardsPopulate = new TablePopulate($cardsSeeder);\r\n\r\n        $cardsPopulate->populate(function () {\r\n            return DB::table('users')\r\n                ->where('type', '!=', 'Employee')\r\n                ->count();\r\n        }, 100);\r\n\r\n        #orders\r\n        $ordersSeeder = new TableSeeder('orders', 'pt_PT');\r\n\r\n\r\n        #operations\r\n        $operationsSeeder = new TableSeeder('operations', 'pt_PT');\r\n        $operationsSeeder->sql('card_id', 'SELECT id FROM cards', []);\r\n\r\n        $operationsPopulate = new TablePopulate($operationsSeeder);\r\n        #$operationsPopulate->populate(5);\r\n\r\n        #orders\r\n        $ordersSeeder = new TableSeeder('orders', 'pt_PT');\r\n        $ordersSeeder->value('total_items', 1);\r\n        $ordersSeeder->sql('member_id', 'SELECT id FROM users WHERE type != ?', ['Employee']);\r\n        $ordersSeeder->value('shipping_cost', 1);\r\n        $ordersSeeder->address('delivery_address')->foreignKey('users', function ($row, $targetRow) {\r\n            if($row['member_id'] == $targetRow['id']) return true;\r\n            return false;\r\n        }, function ($targetRow) {\r\n            return $targetRow['default_delivery_address'];\r\n        })->callback(function ($value, $row) {\r\n            if($value == null) return Faker::create('pt_PT')->address();\r\n            return $value;\r\n        });\r\n        $ordersSeeder->value('nif', null)->foreignKey('users', function ($row, $targetRow) {\r\n            if($row['member_id'] == $targetRow['id']) return true;\r\n            return false;\r\n        }, function ($targetRow) {\r\n            return $targetRow['nif'];\r\n        });\r\n        $ordersSeeder->value('total', 1);\r\n        $ordersSeeder->timeSeries('date', '2023-07-08', '2025-05-10', function (DateTime $date) {\r\n            $weekDay = $date->format('w');\r\n            return [8, 15, 12, 14, 19, 30, 50][$weekDay];\r\n        }, function (DateTime $date) {\r\n            return [\r\n                'date' => $date->format('Y-m-d'),\r\n            ];\r\n        }, deltaAvg: function (DateTime $date, $baseCount) {\r\n            $weekDay = $date->format('w');\r\n\r\n            $min = $baseCount + [5, 7, 5, 5, 10, 15, 30][$weekDay] * -1;\r\n            $max = $baseCount + [5, 7, 5, 5, 10, 15, 30][$weekDay];\r\n\r\n            return $baseCount + rand($min, $max);\r\n        });\r\n        $ordersSeeder->file('pdf_receipt', __DIR__ . '\\receipts', storage_path('app\\public\\receipts'), function ($file, $originalName, $row) {return true;}, function () {}, '1G');\r\n\r\n        $ordersPopulator = new TablePopulate($ordersSeeder);\r\n        $ordersPopulator->populate(21000); //TODO se for null popula ate ao maximo que der\r\n\r\n        #items_orders\r\n        $itemsOrdersSeeder = new TableSeeder('items_orders', 'pt_PT');\r\n        $itemsOrdersSeeder->sql('order_id', 'SELECT id FROM orders', []);\r\n        $itemsOrdersSeeder->sql('product_id', 'SELECT id FROM products', []);\r\n\r\n        $itemsOrdersSeeder->value('unit_price', null)->LookupModiifer('products', function ($row, $targetRow) {\r\n            if($row['product_id'] == $targetRow['id']) return true;\r\n            return false;\r\n        }, function ($targetRow) {\r\n            return $targetRow['price'];\r\n        });\r\n        $itemsOrdersSeeder->weightValues('quantity', [\r\n            1 => 75,\r\n            2 => 30,\r\n            3 => 14,\r\n            4 => 7,\r\n            5 => 4,\r\n            6 => 2,\r\n            7 => 1,\r\n            8 => 1,\r\n            9 => 1,\r\n            10 => 1,\r\n        ]);\r\n        $itemsOrdersSeeder->value('discount', 0)->callback(function ($value, $row) {\r\n            $isDiscount = mt_rand(1, 25 - 2 * $row['quantity']) == 2 ? 1 : 0;\r\n            return $isDiscount ? $row['unit_price'] * rand(1, 40)/100 : $value;\r\n        });\r\n        $itemsOrdersSeeder->value('subtotal', null)->callback(function ($value, $row) {\r\n           return $row['quantity'] * ($row['unit_price'] - $row['discount']);\r\n        });\r\n\r\n        $itemsOrdersPopulate = new TablePopulate($itemsOrdersSeeder);\r\n        $itemsOrdersPopulate->populate(75628, 5000, 50);\r\n\r\n    }\r\n}\n"})})]})}function $(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>s});var t=n(6540);const a={},o=t.createContext(a);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);