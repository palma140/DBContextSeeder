"use strict";(self.webpackChunkdbcontextseeder_docs=self.webpackChunkdbcontextseeder_docs||[]).push([[521],{1834:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"populator/intro","title":"\ud83d\udcc4 TablePopulate - High-Level Overview","description":"TablePopulate is a powerful utility class designed to streamline and standardize the population of database tables in Laravel-based applications. It plays a central role in the DBContextSeeder system, providing an extensible interface to populate tables with large volumes of data\u2014either for testing, simulations, or preloading content.","source":"@site/docs/populator/intro.md","sourceDirName":"populator","slug":"/populator/intro","permalink":"/docs/populator/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/populator/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Examples of usage","permalink":"/docs/basics/examples-of-usage"},"next":{"title":"Table Populate","permalink":"/docs/category/table-populate"}}');var s=t(4848),r=t(8453);const o={},i="\ud83d\udcc4 TablePopulate - High-Level Overview",l={},c=[{value:"\ud83c\udf1f Key Features",id:"-key-features",level:2},{value:"\ud83e\udde0 Core Concepts",id:"-core-concepts",level:2},{value:"<code>TableSeeder</code> Integration",id:"tableseeder-integration",level:3},{value:"Callbacks",id:"callbacks",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-tablepopulate---high-level-overview",children:"\ud83d\udcc4 TablePopulate - High-Level Overview"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TablePopulate"})," is a powerful utility class designed to streamline and standardize the population of database tables in Laravel-based applications. It plays a central role in the ",(0,s.jsx)(n.strong,{children:"DBContextSeeder"})," system, providing an extensible interface to populate tables with large volumes of data\u2014either for testing, simulations, or preloading content."]}),"\n",(0,s.jsx)(n.h2,{id:"-key-features",children:"\ud83c\udf1f Key Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible Input Sources:"})," Supports seeding data from arrays, callable seeders."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Insertion:"})," Efficiently inserts data in configurable batch sizes to reduce memory usage and increase performance."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Retry Mechanism:"})," Automatically retries failed insertions, helping mitigate transient database issues."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pre/Post Hooks:"})," Provides before/after callbacks for custom logic (e.g., logging, cache clearing) during the population process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Foreign Key Handling:"})," Automatically disables/enables foreign key checks around inserts for clean truncation and reseeding."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-core-concepts",children:"\ud83e\udde0 Core Concepts"}),"\n",(0,s.jsxs)(n.h3,{id:"tableseeder-integration",children:[(0,s.jsx)(n.code,{children:"TableSeeder"})," Integration"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"TablePopulate"})," class depends on a ",(0,s.jsx)(n.code,{children:"TableSeeder"}),", which defines:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The target table name"}),"\n",(0,s.jsx)(n.li,{children:"A mapping of field names to their corresponding seeder logic"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This separation of concerns makes it easy to reuse and customize seeding logic across different datasets."}),"\n",(0,s.jsx)(n.h3,{id:"callbacks",children:"Callbacks"}),"\n",(0,s.jsxs)(n.p,{children:["You can attach ",(0,s.jsx)(n.code,{children:"before()"})," and ",(0,s.jsx)(n.code,{children:"after()"})," callbacks to inject behavior at key points in the seeding lifecycle, offering a high degree of control."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$seeder = new TableSeeder('table', 'en_US');\n(...)\n$populator = new TablePopulate($seeder);\n$populator->before(fn() => echo \"Starting...\")\n          ->after(fn() => echo \"Done!\")\n          ->populate(1000); // Populates 1000 entries\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(6540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);