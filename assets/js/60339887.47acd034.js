"use strict";(self.webpackChunkdbcontextseeder_docs=self.webpackChunkdbcontextseeder_docs||[]).push([[119],{2752:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"populator/table-populate/populate","title":"\ud83d\udd01 populate()","description":"The populate() method is designed to bulk insert records into a database table efficiently and safely, with support for batching and retries on failure.","source":"@site/docs/populator/table-populate/populate.md","sourceDirName":"populator/table-populate","slug":"/populator/table-populate/populate","permalink":"/DBContextSeeder/docs/populator/table-populate/populate","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\uddee Basic Usage","permalink":"/DBContextSeeder/docs/populator/table-populate/basic-usage"},"next":{"title":"\ud83e\udde9 populateFromArray()","permalink":"/DBContextSeeder/docs/populator/table-populate/populate-array"}}');var i=r(4848),s=r(8453);const o={sidebar_position:1},l="\ud83d\udd01 populate()",a={},d=[{value:"Description",id:"description",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Exceptions",id:"exceptions",level:2},{value:"\ud83d\udd01 Common Features",id:"-common-features",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"-populate",children:["\ud83d\udd01 ",(0,i.jsx)(t.code,{children:"populate()"})]})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"populate()"})," method is designed to bulk insert records into a database table efficiently and safely, with support for batching and retries on failure."]}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Inserts a specified number of records into the target table."}),"\n",(0,i.jsx)(t.li,{children:"Performs the insertion in batches to optimize performance and avoid memory issues."}),"\n",(0,i.jsx)(t.li,{children:"Retries batch inserts on failure, with a configurable number of attempts."}),"\n",(0,i.jsx)(t.li,{children:"Supports dynamic determination of the total record count via a callback."}),"\n",(0,i.jsx)(t.li,{children:"Truncates the table before inserting new records (disables foreign key checks temporarily)."}),"\n",(0,i.jsx)(t.li,{children:"Allows optional verbose error output for debugging."}),"\n",(0,i.jsx)(t.li,{children:"Executes optional callbacks before and after the population process."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"$count"})}),(0,i.jsx)(t.td,{children:"`int"}),(0,i.jsx)(t.td,{children:"callable`"}),(0,i.jsx)(t.td,{children:"Required"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"$batchSize"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"int"})}),(0,i.jsx)(t.td,{children:"1000"}),(0,i.jsx)(t.td,{children:"Number of records inserted per batch."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"$maxRetries"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"int"})}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"Maximum number of retry attempts for a batch if insertion fails."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"$verbose"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"bool"})}),(0,i.jsx)(t.td,{children:"false"}),(0,i.jsxs)(t.td,{children:["If ",(0,i.jsx)(t.code,{children:"true"}),", shows detailed error messages when a batch insertion fails."]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["If ",(0,i.jsx)(t.code,{children:"$count"})," is a callable, it is executed to get the integer count."]}),"\n",(0,i.jsx)(t.li,{children:"The target table is truncated before insertion (foreign key checks are disabled and re-enabled)."}),"\n",(0,i.jsxs)(t.li,{children:["Records are generated and inserted in batches of size ",(0,i.jsx)(t.code,{children:"$batchSize"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["On failure, the insertion is retried up to ",(0,i.jsx)(t.code,{children:"$maxRetries"}),"."]}),"\n",(0,i.jsx)(t.li,{children:"If retries are exhausted, an exception is thrown."}),"\n",(0,i.jsxs)(t.li,{children:["During retry, stateful seeders like ",(0,i.jsx)(t.code,{children:"SequentionalNumberSeeder"})," have their counters reset to avoid inconsistent data."]}),"\n",(0,i.jsx)(t.li,{children:"Optional callbacks before and after population are executed if set."}),"\n",(0,i.jsx)(t.li,{children:"Status messages are printed to the console, showing progress and errors."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"exceptions",children:"Exceptions"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Throws ",(0,i.jsx)(t.code,{children:"InvalidArgumentException"})," if ",(0,i.jsx)(t.code,{children:"$count"})," is not an integer or a callable returning an integer."]}),"\n",(0,i.jsxs)(t.li,{children:["Throws ",(0,i.jsx)(t.code,{children:"Exception"})," if batch insertion repeatedly fails after max retries."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"-common-features",children:"\ud83d\udd01 Common Features"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"All methods truncate the table before inserting new data."}),"\n",(0,i.jsx)(t.li,{children:"Batches are used to optimize performance and memory usage."}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"beforeCallback"})," and ",(0,i.jsx)(t.code,{children:"afterCallback"})," hooks allow custom logic before and after population."]}),"\n",(0,i.jsx)(t.li,{children:"Foreign key checks are temporarily disabled during truncation to avoid constraint issues."}),"\n"]}),"\n",(0,i.jsx)(t.hr,{})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(6540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);